{"version":3,"sources":["history.js","components/Navbar.js","components/Home.js","apis/aws.js","actions/utils.js","actions/index.js","actions/types.js","components/Recorder.js","utils/index.js","components/Form.js","components/classification/ResNet34.js","components/classification/MobileNetV2.js","components/faceRecognition/FaceAlignment.js","components/faceRecognition/FaceSwap.js","components/faceRecognition/FaceRecognition.js","components/miscellaneous/HumanPoseEstimation.js","components/miscellaneous/DcGan.js","components/miscellaneous/Vae.js","components/miscellaneous/StyleTransfer.js","components/miscellaneous/SrGan.js","components/miscellaneous/ImageCaptioning.js","components/sequence/SentimentAnalysis.js","components/sequence/MachineTranslation.js","components/sequence/SpeechToText.js","components/Footer.js","components/App.js","reducers/modelFormReducer.js","reducers/index.js","reducers/loadingFormReducer.js","index.js"],"names":["createBrowserHistory","basename","process","Navbar","props","toggleNavbar","setState","collapsed","state","activeNavItem","this","history","location","pathname","substring","className","style","backgroundColor","to","src","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","id","_","map","componentItems","componentItem","componentItemName","key","items","item","link","includes","role","aria-haspopup","title","aria-labelledby","href","target","React","Component","withRouter","Home","itemList","extraCardClass","buttonHorizontalSpaceClass","Fragment","renderCard","classification","faceRecognition","nlp","omit","buttonText","axios","create","headers","post","networkTransaction","a","url","formData","requestType","response","numTries","api","get","console","log","loadingForm","formName","payload","clearLoadingForm","submitForm","dispatch","Array","isArray","i","length","fetch","data","then","res","blob","responseBlob","responseFile","File","FormData","append","pop","responseData","name","Recorder","toggleRecording","startRecording","stopRecording","isRecording","recordingButtonText","audioBlob","onChange","input","label","audio","video","blobPropertyBag","onStop","audioBlobUrl","onStopRecording","render","mediaBlobUrl","event","preventDefault","controls","renderError","error","touched","renderFormField","contentType","required","formGroupClassName","options","meta","errorClassName","renderFileField","value","renderDropdownField","renderTextField","renderSubmitButton","loading","originalText","loadingText","btnColor","ref","disabled","aria-hidden","Form","onSubmit","formValues","objectURL","otherData","objectItem","URL","createObjectURL","submitButtonRef","createRef","handleSubmit","fields","Field","component","form","connect","reduxForm","validate","errors","image","ResNet34","modelForm","width","align","renderOutput","MobileNetV2","FaceAlignment","result","data-dismiss","FaceSwap","sourceImageURL","source","targetImageURL","renderOutputSmallDisplay","renderOutputLargeDisplay","FaceRecognition","marginTop","HumanPoseEstimation","DcGan","Vae","StyleTransfer","contentImageURL","content","styleImageURL","styleMap","1","2","3","4","5","6","7","8","9","SrGan","ImageCaptioning","SentimentAnalysis","inputText","text","MachineTranslation","SpeechToText","Footer","App","miscellaneous","path","exact","INITIAL_STATE","combineReducers","formReducer","action","filter","element","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3280b995.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n","import _ from 'lodash';\nimport React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n    };\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    const activeNavItem = this.props.history.location.pathname.substring(1);\n    return (\n      <nav\n        className=\"navbar navbar-expand-lg navbar-dark\"\n        style={{ backgroundColor: '#000000' }}\n      >\n        <div className=\"container\">\n          <Link to=\"/\" className=\"navbar-brand\">\n            <img\n              src={`${process.env.PUBLIC_URL}/orionai.png`}\n              style={{ height: '2rem' }}\n              className=\"mr-2\"\n              alt=\"logo\"\n            />{' '}\n            Orion AI\n          </Link>\n          <button\n            className={`navbar-toggler navbar-toggler-right ${\n              this.state.collapsed ? 'collapsed' : ''\n            }`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n            onClick={this.toggleNavbar}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div\n            className={`collapse navbar-collapse ${\n              this.state.collapsed ? '' : 'show'\n            }`}\n            id=\"navbarSupportedContent\"\n            onClick={this.toggleNavbar}\n          >\n            <ul className=\"navbar-nav mr-auto\">\n              {_.map(\n                this.props.componentItems,\n                (componentItem, componentItemName) => {\n                  return (\n                    <li className=\"nav-item dropdown\" key={componentItemName}>\n                      <Link\n                        className={`nav-link dropdown-toggle ${\n                          _.map(\n                            componentItem.items,\n                            item => item.link\n                          ).includes(activeNavItem)\n                            ? 'active'\n                            : ''\n                        }`}\n                        to=\"#\"\n                        id={`${componentItemName}-dropdown`}\n                        role=\"button\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                      >\n                        {componentItem.title}\n                      </Link>\n                      <div\n                        className=\"dropdown-menu\"\n                        aria-labelledby={`${componentItemName}-dropdown`}\n                      >\n                        {_.map(componentItem.items, item => {\n                          return (\n                            <Link\n                              to={`/${item.link}`}\n                              className={`dropdown-item ${\n                                activeNavItem === `${item.link}` ? 'active' : ''\n                              }`}\n                              key={item.link}\n                            >\n                              {item.title}\n                            </Link>\n                          );\n                        })}\n                      </div>\n                    </li>\n                  );\n                }\n              )}\n            </ul>\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <a\n                  href=\"https://github.com/OrionAI/\"\n                  className=\"nav-link\"\n                  target=\"blank\"\n                >\n                  GitHub\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default withRouter(Navbar);\n","import _ from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Home extends React.Component {\n  renderCard({ title, itemList, extraCardClass, buttonHorizontalSpaceClass }) {\n    return (\n      <div className={`col mb-5 ${extraCardClass}`}>\n        <div className=\"card shadow p-3 bg-white rounded\">\n          <div className=\"card-body text-center\">\n            <h3 className=\"card-title\">{title}</h3>\n            <div className=\"card-text\">\n              {_.map(itemList, item => {\n                return (\n                  <Link to={`/${item.link}`} key={item.link}>\n                    <button\n                      type=\"button\"\n                      className={`btn border border-secondary mt-2 ${buttonHorizontalSpaceClass}`}\n                    >\n                      {item.title}\n                    </button>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1 className=\"heading\">\n              <img\n                src={`${process.env.PUBLIC_URL}/orionai.png`}\n                style={{ height: '5rem' }}\n                alt=\"logo\"\n              />{' '}\n              Orion AI\n            </h1>\n          </div>\n        </div>\n        <div className=\"row mb-5\">\n          <div className=\"col-12 text-center\">\n            Please select a model below to continue\n          </div>\n        </div>\n        <div className=\"row row-cols-1 row-cols-lg-2\">\n          {this.renderCard({\n            title: 'Classification Models',\n            itemList: this.props.componentItems.classification.items,\n            buttonHorizontalSpaceClass: 'mx-2',\n          })}\n          {this.renderCard({\n            title: 'Face Recognition Models',\n            itemList: this.props.componentItems.faceRecognition.items,\n            buttonHorizontalSpaceClass: 'mr-2',\n          })}\n          {this.renderCard({\n            title: 'NLP & Audio Models',\n            itemList: this.props.componentItems.nlp.items,\n            extraCardClass: 'mx-auto',\n            buttonHorizontalSpaceClass: 'mr-2',\n          })}\n        </div>\n        <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3\">\n          {_.map(\n            _.omit(\n              _.omit(\n                _.omit(this.props.componentItems, 'classification'),\n                'faceRecognition'\n              ),\n              'nlp'\n            ),\n            componentItem => {\n              return _.map(componentItem.items, item => {\n                return (\n                  <div className=\"col mb-5\" key={item.link}>\n                    <div className=\"card shadow p-3 bg-white rounded\">\n                      <div className=\"card-body text-center\">\n                        <h3 className=\"card-title\">{item.title}</h3>\n                        <div className=\"card-text\">\n                          <Link to={`/${item.link}`}>\n                            <button\n                              type=\"button\"\n                              className=\"btn border border-secondary mt-2\"\n                            >\n                              {item.buttonText}\n                            </button>\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              });\n            }\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import axios from 'axios';\n\nexport default axios.create({\n  headers: {\n    post: {\n      'Content-Type': 'multipart/form-data',\n    },\n  },\n});\n","import api from '../apis/aws';\n\nexport const networkTransaction = async ({ url, formData, requestType }) => {\n  let response = null;\n  let numTries = 0;\n  while (numTries >= 0 && numTries <= 2) {\n    try {\n      if (requestType === 'post') {\n        response = await api.post(url, formData);\n      } else {\n        response = await api.get(url);\n      }\n      numTries = -1;\n    } catch (error) {\n      console.log(error);\n      numTries++;\n    }\n  }\n  return response;\n};\n\nexport const dataURLtoFile = (dataurl, filename) => {\n  const arr = dataurl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  while (n) {\n    u8arr[n - 1] = bstr.charCodeAt(n - 1);\n    n -= 1; // to make eslint happy\n  }\n  return new File([u8arr], filename, { type: mime });\n};\n","import { LOADING_FORM, CLEAR_LOADING_FORM, SUBMIT_FORM } from './types';\nimport { networkTransaction } from './utils';\n\nexport const loadingForm = formName => {\n  return {\n    type: LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const clearLoadingForm = formName => {\n  return {\n    type: CLEAR_LOADING_FORM,\n    payload: formName,\n  };\n};\n\nexport const submitForm = ({\n  url,\n  formName,\n  formData,\n  type,\n  requestType,\n}) => async dispatch => {\n  if (formName) {\n    dispatch(loadingForm(formName));\n  }\n\n  // Default request type is post\n  if (!requestType) {\n    requestType = 'post';\n  }\n\n  // If only single url given insert it to an array\n  if (!Array.isArray(url)) {\n    url = [url];\n  }\n\n  // The last url response does not need to be converted to file\n  // so we skip it\n  let response = null;\n  for (let i = 0; i < url.length - 1; i++) {\n    response = await networkTransaction({\n      url: url[i],\n      formData,\n      requestType,\n    });\n\n    // Data returned is string which has to be converted to file object\n    let responseBlob = await fetch(\n      `data:${type};base64,${response.data.data}`\n    ).then(res => res.blob());\n    let responseFile = new File([responseBlob], 'recording.wav', { type });\n\n    formData = new FormData();\n    formData.append('data', responseFile);\n  }\n\n  // Processing the last url in list to display in webpage\n  response = await networkTransaction({\n    url: url.pop(),\n    formData,\n    requestType,\n  });\n\n  // If response is null then this will avoid throwing error\n  let responseData = response;\n  if (response) {\n    responseData = response.data;\n  }\n\n  dispatch({\n    type: SUBMIT_FORM,\n    payload: { name: formName, data: responseData },\n  });\n\n  if (formName) {\n    dispatch(clearLoadingForm(formName));\n  }\n};\n","export const LOADING_FORM = 'LOADING_FORM';\nexport const CLEAR_LOADING_FORM = 'CLEAR_LOADING_FORM';\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n","import React from 'react';\n\nimport { ReactMediaRecorder } from 'react-media-recorder';\n\nclass Recorder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isRecording: false,\n      recordingButtonText: <i className=\"fas fa-microphone\"></i>,\n    };\n  }\n\n  onStopRecording(audioBlob, onChange) {\n    onChange(new File([audioBlob], 'recording.wav', { type: 'audio/wav' }));\n  }\n\n  toggleRecording = (startRecording, stopRecording) => {\n    if (this.state.isRecording) {\n      this.setState({\n        recordingButtonText: <i className=\"fas fa-microphone\"></i>,\n        isRecording: false,\n      });\n      stopRecording();\n    } else {\n      this.setState({\n        recordingButtonText: <i className=\"fas fa-stop-circle\"></i>,\n        isRecording: true,\n      });\n      startRecording();\n    }\n  };\n\n  render() {\n    const {\n      input: { onChange },\n      label,\n    } = this.props;\n    return (\n      <ReactMediaRecorder\n        audio={true}\n        video={false}\n        blobPropertyBag={{ type: 'audio/wav' }}\n        onStop={(audioBlobUrl, audioBlob) =>\n          this.onStopRecording(audioBlob, onChange)\n        }\n        render={({ startRecording, stopRecording, mediaBlobUrl }) => (\n          <React.Fragment>\n            <div className=\"row mb-3\">\n              <div className=\"col\">{label}</div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col mt-2\">\n                <button\n                  className=\"btn bg-transparent\"\n                  onClick={event => {\n                    event.preventDefault();\n                    this.toggleRecording(startRecording, stopRecording);\n                  }}\n                >\n                  {this.state.recordingButtonText}\n                </button>\n              </div>\n              <div className=\"col\">\n                <audio src={mediaBlobUrl} controls />\n              </div>\n              <div className=\"col-10\" />\n            </div>\n          </React.Fragment>\n        )}\n      />\n    );\n  }\n}\n\nexport default Recorder;\n","import _ from 'lodash';\nimport React from 'react';\n\nexport const renderError = ({ error, touched }) => {\n  if (touched && error) {\n    return <div className=\"invalid-feedback\">{error}</div>;\n  }\n};\n\nexport const renderFileField = ({\n  input,\n  label,\n  required,\n  formGroupClassName,\n  meta,\n}) => {\n  const errorClassName = `${\n    required && meta.touched && meta.error ? 'is-invalid' : ''\n  }`;\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <label>{label}</label>\n      <div className={`input-group ${errorClassName}`}>\n        <input\n          {..._.omit(input, 'value')}\n          type=\"file\"\n          className=\"form-control-file\"\n        />\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderDropdownField = ({\n  input,\n  label,\n  required,\n  formGroupClassName,\n  options,\n  meta,\n}) => {\n  const errorClassName = `${\n    required && meta.touched && meta.error ? 'is-invalid' : ''\n  }`;\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <label>{label}</label>\n      <div className={`input-group ${errorClassName}`}>\n        <select {...input} className=\"form-control custom-select\">\n          <option value=\"\">Choose...</option>\n          {_.map(options, (value, key) => {\n            if (key !== '') {\n              return (\n                <option key={key} value={key}>\n                  {value[0]}\n                </option>\n              );\n            }\n            return '';\n          })}\n        </select>\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderTextField = ({\n  input,\n  label,\n  required,\n  formGroupClassName,\n  meta,\n}) => {\n  const errorClassName = `${\n    required && meta.touched && meta.error ? 'is-invalid' : ''\n  }`;\n  return (\n    <div className={`form-group ${formGroupClassName}`}>\n      <label>{label}</label>\n      <div className={`input-group ${errorClassName}`}>\n        <input {...input} type=\"text\" className=\"form-control\" />\n      </div>\n      {renderError(meta)}\n    </div>\n  );\n};\n\nexport const renderFormField = ({\n  input,\n  contentType,\n  label,\n  required,\n  formGroupClassName,\n  options,\n  meta,\n}) => {\n  if (contentType === 'file') {\n    return renderFileField({\n      input,\n      label,\n      required,\n      formGroupClassName,\n      meta,\n    });\n  } else if (contentType === 'dropdown') {\n    return renderDropdownField({\n      input,\n      label,\n      required,\n      formGroupClassName,\n      options,\n      meta,\n    });\n  } else if (contentType === 'text') {\n    return renderTextField({\n      input,\n      label,\n      required,\n      formGroupClassName,\n      meta,\n    });\n  }\n  return '';\n};\n\nexport const renderSubmitButton = ({\n  loading,\n  originalText,\n  loadingText,\n  onClick,\n  btnColor,\n  ref,\n}) => {\n  if (!btnColor) {\n    btnColor = 'primary';\n  }\n  if (loading) {\n    return (\n      <button className={`btn btn-${btnColor}`} ref={ref} disabled>\n        <span\n          className=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n          aria-hidden=\"true\"\n        ></span>\n        &nbsp;&nbsp;{loadingText}\n      </button>\n    );\n  } else {\n    return (\n      <button className={`btn btn-${btnColor}`} ref={ref} onClick={onClick}>\n        {originalText}\n      </button>\n    );\n  }\n};\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Recorder from './Recorder';\nimport { renderFormField, renderSubmitButton } from '../utils';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = formValues => {\n    const formData = new FormData();\n    let objectURL = {};\n    let otherData = {};\n    for (let i in formValues) {\n      if (typeof formValues[i] === 'object') {\n        let objectItem = formValues[i];\n        if (objectItem.length) {\n          objectItem = objectItem[0];\n        }\n        formData.append(i, objectItem);\n        objectURL[i] = URL.createObjectURL(objectItem);\n      } else {\n        formData.append(i, formValues[i]);\n        otherData[i] = formValues[i];\n      }\n    }\n    this.props.onSubmit({ formData, objectURL, otherData });\n  };\n\n  render() {\n    let buttonText = {\n      originalText: 'Predict',\n      loadingText: 'Predicting...',\n    };\n    if (this.props.buttonText) {\n      buttonText = this.props.buttonText;\n    }\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        {_.map(this.props.fields, item => {\n          if (item.contentType === 'audio') {\n            return (\n              <Field\n                name={item.name}\n                key={item.name}\n                component={Recorder}\n                label={item.label}\n                required\n              />\n            );\n          } else {\n            return (\n              <Field\n                name={item.name}\n                key={item.name}\n                component={renderFormField}\n                contentType={item.contentType}\n                label={item.label}\n                options={item.options}\n                required\n              />\n            );\n          }\n        })}\n        <div className=\"row mt-3\">\n          <div className=\"col mx-auto\">\n            {renderSubmitButton({\n              loading: this.props.loadingForm.includes(this.props.form),\n              ref: this.submitButtonRef,\n              ...buttonText,\n            })}\n          </div>\n          <div className=\"col-12\">\n            <small>\n              *The model might take more than 1 min to give predictions for the\n              first time.\n            </small>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.image) {\n    errors.image = 'Please upload an image';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = ({ loadingForm }) => {\n  return { loadingForm };\n};\n\nexport default connect(mapStateToProps)(reduxForm({ validate })(Form));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass ResNet34 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'resnet34';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url:\n        'https://ji5h693qhd.execute-api.ap-south-1.amazonaws.com/dev/classify_image',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"dum\"\n              />\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Prediction</h5>\n                <p className=\"card-text\">\n                  {this.props.modelForm.data['predicted name']}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">ResNet34</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This is a ResNet34 model trained on the ImageNet dataset.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                { name: 'image', contentType: 'file', label: 'Upload Image' },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(ResNet34);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass MobileNetV2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'mobilenetv2';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url:\n        'https://5a7jq62zm2.execute-api.ap-south-1.amazonaws.com/dev/classify',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"dum\"\n              />\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Prediction</h5>\n                <p className=\"card-text\">\n                  {this.props.modelForm.data['predicted_name']}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">MobileNetV2</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This model is a custom version of MobileNet v2. It was trained on\n              a custom dataset to classify among images belonging to the 4\n              classes below\n            </p>\n            <ul>\n              <li>Flying Birds</li>\n              <li>Large QuadCopters</li>\n              <li>Small QuadCopters</li>\n              <li>Winged Drones</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                { name: 'image', contentType: 'file', label: 'Upload Image' },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(MobileNetV2);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass FaceAlignment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'facealignment';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: 'https://tq1mihfdxd.execute-api.ap-south-1.amazonaws.com/dev/align',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      if (this.props.modelForm.data.result === 'success') {\n        return (\n          <div className=\"row mt-5\">\n            <div className=\"col-12 col-md-6 mt-4 ml-auto text-center\">\n              <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n                <img\n                  src={this.state.objectURL}\n                  className=\"card-img-top\"\n                  alt=\"source\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Input Image</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-12 col-md-6 mt-4 mr-auto text-center\">\n              <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n                <img\n                  src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                  className=\"card-img-top\"\n                  alt=\"aligned\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Aligned Image</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"row mt-5\">\n            <div className=\"col-12\">\n              <div className=\"alert alert-danger\">\n                {this.props.modelForm.data.data}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Face Alignment</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This model uses dlib to perform face alignment tasks. Upload the\n              image of a face below to run the model.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'file',\n                  label: 'Upload Face Image',\n                },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(FaceAlignment);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass FaceSwap extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceImageURL: null,\n      targetImageURL: null,\n    };\n\n    this.formName = 'faceswap';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: 'https://taqm4e1fg3.execute-api.ap-south-1.amazonaws.com/dev/swap',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({\n      sourceImageURL: objectURL.source,\n      targetImageURL: objectURL.target,\n    });\n  };\n\n  renderOutputSmallDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-12 d-block d-md-none mx-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-2\">\n              <h3 className=\"text-center\">Inputs</h3>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"card\">\n                <img\n                  src={this.state.sourceImageURL}\n                  className=\"card-img-top\"\n                  alt=\"source\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Source Image</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-12 mt-2\">\n              <div className=\"card\">\n                <img\n                  src={this.state.targetImageURL}\n                  className=\"card-img-top\"\n                  alt=\"target\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Target Image</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-12 d-block d-md-none mx-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mt-5 mb-2\">\n              <h3 className=\"text-center\">Outputs</h3>\n            </div>\n          </div>\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"swap\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Swapped Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutputLargeDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-7 d-none d-md-block ml-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-4\">\n              <h3 className=\"text-center\">Inputs</h3>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"card\">\n                <img\n                  src={this.state.sourceImageURL}\n                  className=\"card-img-top\"\n                  alt=\"source\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Source Image</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"card\">\n                <img\n                  src={this.state.targetImageURL}\n                  className=\"card-img-top\"\n                  alt=\"target\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Target Image</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-1 d-none d-md-block\" />\n        <div className=\"col-4 d-none d-md-block mr-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-4\">\n              <h3 className=\"text-center\">Outputs</h3>\n            </div>\n          </div>\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"swap\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Swapped Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      if (this.props.modelForm.data.result === 'success') {\n        return (\n          <div className=\"row mt-5\">\n            {this.renderOutputSmallDisplay()}\n            {this.renderOutputLargeDisplay()}\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"row mt-5\">\n            <div className=\"col-12\">\n              <div className=\"alert alert-danger\">\n                {this.props.modelForm.data.data}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Face Swap</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-8 mx-auto\">\n            <p align=\"justify\">\n              This model uses dlib to perform face swapping tasks. The face of\n              the source image will be swapped to the target image face. Upload\n              the images below to run the model.\n            </p>\n            <p align=\"justify\">\n              <i>\n                Note: The faces in both the images should have the same\n                alignment.\n              </i>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-5\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'source',\n                  contentType: 'file',\n                  label: 'Upload Source Image',\n                },\n                {\n                  name: 'target',\n                  contentType: 'file',\n                  label: 'Upload Target Image',\n                },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(FaceSwap);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass FaceRecognition extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'facerecognition';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: [\n        'https://tq1mihfdxd.execute-api.ap-south-1.amazonaws.com/dev/align',\n        'https://3ggdkd4lo4.execute-api.ap-south-1.amazonaws.com/dev/recognize',\n      ],\n      formName: this.formName,\n      formData: formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutputSmallDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-12 d-block d-md-none mx-auto text-center\">\n          <h3 className=\"text-center mb-2\">Input Image</h3>\n          <img\n            src={this.state.objectURL}\n            className=\"card-img-top\"\n            alt=\"input\"\n            style={{ width: '20rem' }}\n          />\n        </div>\n        <div className=\"col-12 d-block d-md-none mx-auto text-center\">\n          <h3 className=\"text-center mt-5 mb-2\">Prediction</h3>\n          <h4 style={{ marginTop: '1rem' }}>\n            {this.props.modelForm.data.data['predicted_name']}\n          </h4>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutputLargeDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-7 d-none d-md-block ml-auto text-center\">\n          <h3 className=\"text-center mb-5\">Input Image</h3>\n          <img\n            src={this.state.objectURL}\n            className=\"card-img-top\"\n            alt=\"input\"\n            style={{ width: '30rem' }}\n          />\n        </div>\n        <div className=\"col-1\" />\n        <div className=\"col-4 d-none d-md-block mr-auto text-center\">\n          <h3 className=\"text-center mb-5\">Prediction</h3>\n          <h2 style={{ marginTop: '10rem' }}>\n            {this.props.modelForm.data.data['predicted_name']}\n          </h2>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      if (this.props.modelForm.data.result === 'success') {\n        return (\n          <div className=\"row mt-5\">\n            {this.renderOutputSmallDisplay()}\n            {this.renderOutputLargeDisplay()}\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"row mt-5\">\n            <div className=\"col-12\">\n              <div className=\"alert alert-danger\">\n                {this.props.modelForm.data.data}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Face Recognition</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This model can perform face recognition for the following persons\n              below\n            </p>\n            <ul>\n              <li>Donald Trump</li>\n              <li>Elon Musk</li>\n              <li>Emma Stone</li>\n              <li>Emma Watson</li>\n              <li>Geoffrey Hinton</li>\n              <li>Hrithik Roshan</li>\n              <li>Narendra Modi</li>\n              <li>Priyanka Chopra</li>\n              <li>Tom Cruise</li>\n              <li>Will Smith</li>\n            </ul>\n            <p>\n              If the image does not belong to any of the people mentioned above\n              it will not return a correct result.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                { name: 'image', contentType: 'file', label: 'Upload Image' },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(FaceRecognition);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass HumanPoseEstimation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'humanposeestimation';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: 'https://wrad2oqme9.execute-api.ap-south-1.amazonaws.com/dev/pose',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mt-4 ml-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Input Image</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-md-6 mt-4 mr-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"pose\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Pose Estimated Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Human Pose Estimation</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This model uses a ResNet-50 model pre-trained on the MPII dataset\n              to predict and draw pose of a human in the input image.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'file',\n                  label: 'Upload Face Image',\n                },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(HumanPoseEstimation);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form';\n\nimport { submitForm } from '../../actions';\nimport { renderSubmitButton } from '../../utils';\n\nclass DcGan extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = () => {\n    this.props.submitForm({\n      url: 'https://etm0x19qn5.execute-api.ap-south-1.amazonaws.com/dev/gan',\n      formName: this.props.form,\n      requestType: 'get',\n    });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.props.form) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mt-4 mx-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"pose\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Generated Car Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">DC Generative Advesarial Network</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This model is a Deep Convolutional Generative Adversarial Network.\n              It can be used to generate images of Indian cars. Please click the\n              generate button below to generate a car image.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n              <div className=\"row mt-3\">\n                <div className=\"col mx-auto\">\n                  {renderSubmitButton({\n                    loading: this.props.loadingForm.includes(this.props.form),\n                    originalText: 'Generate',\n                    loadingText: 'Generating...',\n                    ref: this.submitButtonRef,\n                  })}\n                </div>\n                <div className=\"col-12\">\n                  <small>\n                    *The model might not give predictions for the first 1-2\n                    times. In such cases, please try again.\n                  </small>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm, loadingForm }) => {\n  return { modelForm, loadingForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(\n  reduxForm({ form: 'dcgan' })(DcGan)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass Vae extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'vae';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: 'https://zxpgsttdeh.execute-api.ap-south-1.amazonaws.com/dev/vae',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mt-4 ml-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Input Image</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-md-6 mt-4 mr-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"aligned\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Reconstructed Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Variational AutoEncoders</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This is a small VAE which can reconstruct left facing Indian car\n              images with a white background.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'file',\n                  label:\n                    'Upload Left Facing Indian Car Image with white background',\n                },\n              ]}\n              buttonText={{\n                originalText: 'Reconstruct',\n                loadingText: 'Reconstructing',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(Vae);\n","import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass StyleTransfer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contentImageURL: null,\n      styleImageURL: null,\n    };\n\n    this.formName = 'styletransfer';\n    this.submitButtonRef = React.createRef();\n    this.styleMap = {\n      1: ['Candy', `${process.env.PUBLIC_URL}/assets/styles/candy.jpg`],\n      2: [\n        'Composition VII',\n        `${process.env.PUBLIC_URL}/assets/styles/composition_vii.jpg`,\n      ],\n      3: ['Feathers', `${process.env.PUBLIC_URL}/assets/styles/feathers.jpg`],\n      4: ['La Muse', `${process.env.PUBLIC_URL}/assets/styles/la_muse.jpg`],\n      5: ['Mosaic', `${process.env.PUBLIC_URL}/assets/styles/mosaic.jpg`],\n      6: [\n        'Starry Night',\n        `${process.env.PUBLIC_URL}/assets/styles/starry_night.jpg`,\n      ],\n      7: [\n        'The Scream',\n        `${process.env.PUBLIC_URL}/assets/styles/the_scream.jpg`,\n      ],\n      8: ['Udnie', `${process.env.PUBLIC_URL}/assets/styles/udnie.jpg`],\n      9: ['Wave', `${process.env.PUBLIC_URL}/assets/styles/wave.jpg`],\n    };\n  }\n\n  onSubmit = ({ formData, objectURL, otherData }) => {\n    this.props.submitForm({\n      url: 'https://0g0e7jb2ni.execute-api.ap-south-1.amazonaws.com/dev/style',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({\n      contentImageURL: objectURL.content,\n      styleImageURL: this.styleMap[otherData.style][1],\n    });\n  };\n\n  renderOutputSmallDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-12 d-block d-md-none mx-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-2\">\n              <h3 className=\"text-center\">Inputs</h3>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"card\">\n                <img\n                  src={this.state.contentImageURL}\n                  className=\"card-img-top\"\n                  alt=\"content\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Content Image</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-12 mt-2\">\n              <div className=\"card\">\n                <img\n                  src={this.state.styleImageURL}\n                  className=\"card-img-top\"\n                  alt=\"style\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Style Image</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-12 d-block d-md-none mx-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mt-5 mb-2\">\n              <h3 className=\"text-center\">Output</h3>\n            </div>\n          </div>\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"styled\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Styled Content Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutputLargeDisplay() {\n    return (\n      <React.Fragment>\n        <div className=\"col-7 d-none d-md-block ml-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-4\">\n              <h3 className=\"text-center\">Inputs</h3>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"card\">\n                <img\n                  src={this.state.contentImageURL}\n                  className=\"card-img-top\"\n                  alt=\"content\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Content Image</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"card\">\n                <img\n                  src={this.state.styleImageURL}\n                  className=\"card-img-top\"\n                  alt=\"style\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">Style Image</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-1 d-none d-md-block\" />\n        <div className=\"col-4 d-none d-md-block mr-auto\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-4\">\n              <h3 className=\"text-center\">Output</h3>\n            </div>\n          </div>\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"styled\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Styled Content Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          {this.renderOutputSmallDisplay()}\n          {this.renderOutputLargeDisplay()}\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Neural Style Transfer</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-8 mx-auto\">\n            <p align=\"justify\">\n              This model uses MSG-Net to perform Neural Style Transfer. Upload\n              your content image and select a style from one of the styles\n              available below. The selected style will be applied to you content\n              image.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h3 className=\"heading\">Available Styles</h3>\n          </div>\n          <div className=\"col\">\n            <div className=\"row row-cols-1 row-cols-md-3 row-cols-lg-5\">\n              {_.map(this.styleMap, (value, key) => {\n                return (\n                  <div className=\"col mb-4\" key={key}>\n                    <div className=\"card\">\n                      <img\n                        src={value[1]}\n                        className=\"card-img-top\"\n                        alt={value[0]}\n                      />\n                      <div className=\"card-body\">\n                        <p className=\"card-text\">{value[0]}</p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row my-5\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'content',\n                  contentType: 'file',\n                  label: 'Upload Content Image',\n                },\n                {\n                  name: 'style',\n                  contentType: 'dropdown',\n                  label: 'Select Style Image',\n                  options: this.styleMap,\n                },\n              ]}\n              buttonText={{\n                originalText: 'Style',\n                loadingText: 'Styling',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(StyleTransfer);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass SrGan extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      objectURL: null,\n    };\n\n    this.formName = 'srgan';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url: 'https://kft1ntmfe2.execute-api.ap-south-1.amazonaws.com/dev/srgan',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-md-6 mt-4 ml-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '20rem' }}>\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">Input Image</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-md-6 mt-4 mr-auto text-center\">\n            <div className=\"card mx-auto\" style={{ width: '40rem' }}>\n              <img\n                src={`data:image/jpeg;base64,${this.props.modelForm.data.data}`}\n                className=\"card-img-top\"\n                alt=\"aligned\"\n              />\n              <div className=\"card-body\">\n                <p className=\"card-text\">High Resolution Image</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Super Resolution GAN</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This is a Super Resolution Generative Adversarial Network (SRGAN).\n              It can convert low resolution flying drone images to high quality\n              resolution images.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'file',\n                  label: 'Upload flying drone image',\n                },\n              ]}\n              buttonText={{\n                originalText: 'Generate',\n                loadingText: 'Generating',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(SrGan);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass ImageCaptioning extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formName = 'imagecaptioning';\n    this.submitButtonRef = React.createRef();\n\n    this.state = {\n      objectURL: null,\n    };\n  }\n\n  onSubmit = ({ formData, objectURL }) => {\n    this.props.submitForm({\n      url:\n        'https://h6wqsfa9dh.execute-api.ap-south-1.amazonaws.com/dev/caption',\n      formName: this.formName,\n      formData,\n    });\n\n    this.setState({ objectURL: objectURL.image });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-lg-6 mt-4 ml-auto text-center\">\n            <h4 className=\"text-center\">Input Image</h4>\n            <div\n              className=\"card mx-auto mt-3 shadow bg-white rounded\"\n              style={{ width: '20rem' }}\n            >\n              <img\n                src={this.state.objectURL}\n                className=\"card-img-top\"\n                alt=\"source\"\n              />\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-6 mt-4 mr-auto text-center\">\n            <h4 className=\"text-center\">Generated Caption</h4>\n            <div className=\"card mx-auto mt-3 shadow bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{this.props.modelForm.data.data}</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Image Captioning</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-8 mx-auto\">\n            <p align=\"justify\">\n              This is an image caption generation model based on the\n              <i>\"Show, Attend, and Tell\"</i> paper. The model is trained on\n              Flickr8k dataset.\n            </p>\n            Parameters:\n            <ul>\n              <li>\n                Image Feature Extractor: Pre-trained ResNet-18 on ImageNet\n                dataset\n              </li>\n              <li>Embedding Dimensions: 128</li>\n              <li>Attention Dimensions: 128</li>\n              <li>Decoder Dimensions: 128</li>\n              <li>Batch Size: 32</li>\n              <li>Decoder Learning Rate: 4e-4</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'image',\n                  contentType: 'file',\n                  label: 'Upload an image',\n                },\n              ]}\n              buttonText={{\n                originalText: 'Generate Caption',\n                loadingText: 'Generating',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(ImageCaptioning);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass SentimentAnalysis extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formName = 'sentimentanalysis';\n    this.submitButtonRef = React.createRef();\n\n    this.state = {\n      inputText: null,\n    };\n  }\n\n  onSubmit = ({ formData, otherData }) => {\n    this.setState({ inputText: otherData.text });\n    this.props.submitForm({\n      url:\n        'https://zxj1gtrcp1.execute-api.ap-south-1.amazonaws.com/dev/sentiment',\n      formName: this.formName,\n      formData,\n    });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-lg-6 mt-4 ml-auto text-center\">\n            <h4 className=\"text-center\">Movie Review</h4>\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-text\">{this.state.inputText}</h5>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-6 mt-4 mr-auto text-center\">\n            <h4 className=\"text-center\">Sentiment</h4>\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{this.props.modelForm.data.data}</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Sentiment Analysis</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This is a sentiment analysis model trained on the IMDb reviews\n              dataset. The model can predict whether a given movie review is\n              positive or negative.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'text',\n                  contentType: 'text',\n                  label: 'Enter Movie Review:',\n                },\n              ]}\n              buttonText={{\n                originalText: 'Predict',\n                loadingText: 'Predicting',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(SentimentAnalysis);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass MachineTranslation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formName = 'machinetranslation';\n    this.submitButtonRef = React.createRef();\n\n    this.state = {\n      inputText: null,\n    };\n  }\n\n  onSubmit = ({ formData, otherData }) => {\n    this.setState({ inputText: otherData.text });\n    this.props.submitForm({\n      url:\n        'https://zr7hdctbgd.execute-api.ap-south-1.amazonaws.com/dev/translate',\n      formName: this.formName,\n      formData,\n    });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-lg-6 mt-4 ml-auto text-center\">\n            <h4 className=\"text-center\">German</h4>\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-text\">{this.state.inputText}</h5>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-6 mt-4 mr-auto text-center\">\n            <h4 className=\"text-center\">English</h4>\n            <div className=\"card mx-auto shadow p-3 bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{this.props.modelForm.data.data}</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">German to English Translation</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <p align=\"justify\">\n              This is a machine translation model which can translate a sentence\n              in German to English. Since the model was trained on a very small\n              dataset it might not give completely accurate results.\n            </p>\n            <p>\n              <i>\n                Note: The model will give best results when the input sentence\n                does not have any punctuations.\n              </i>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'text',\n                  contentType: 'text',\n                  label: 'Enter a German Sentence:',\n                },\n              ]}\n              buttonText={{\n                originalText: 'Übersetzen',\n                loadingText: 'Übersetzen',\n              }}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(MachineTranslation);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { submitForm } from '../../actions';\nimport Form from '../Form';\n\nclass SpeechToText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.formName = 'speechtotext';\n    this.submitButtonRef = React.createRef();\n  }\n\n  onSubmit = ({ formData }) => {\n    this.props.submitForm({\n      url: [\n        'https://prmttt5z7a.execute-api.ap-south-1.amazonaws.com/dev/convert',\n        'https://8krxpgofzh.execute-api.ap-south-1.amazonaws.com/dev/stt',\n      ],\n      formName: this.formName,\n      formData,\n      type: 'audio/wav',\n    });\n  };\n\n  renderOutput() {\n    if (this.props.modelForm.name === this.formName) {\n      return (\n        <div className=\"row mt-5\">\n          <div className=\"col-12 col-lg-6 mt-4 mx-auto text-center\">\n            <h4 className=\"text-center\">Predicted Text</h4>\n            <div className=\"card mx-auto mt-3 shadow bg-white rounded\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{this.props.modelForm.data.data}</h5>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"heading\">Speech to Text</h1>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-8 mx-auto\">\n            <p align=\"justify\">\n              This is a simple Speech-to-Text (STT) model which can generate\n              transcriptions of <i>one-word audio recordings</i>. For now, only\n              the following words are supported.\n            </p>\n            <div className=\"row\">\n              <div className=\"col\">\n                <ul>\n                  <li>bed</li>\n                  <li>bird</li>\n                  <li>cat</li>\n                  <li>dog</li>\n                  <li>down</li>\n                  <li>eight</li>\n                  <li>five</li>\n                  <li>four</li>\n                  <li>go</li>\n                  <li>happy</li>\n                </ul>\n              </div>\n              <div className=\"col\">\n                <ul>\n                  <li>house</li>\n                  <li>left</li>\n                  <li>marvin</li>\n                  <li>nine</li>\n                  <li>no</li>\n                  <li>off</li>\n                  <li>on</li>\n                  <li>one</li>\n                  <li>right</li>\n                  <li>seven</li>\n                </ul>\n              </div>\n              <div className=\"col\">\n                <ul>\n                  <li>sheila</li>\n                  <li>six</li>\n                  <li>stop</li>\n                  <li>three</li>\n                  <li>tree</li>\n                  <li>two</li>\n                  <li>up</li>\n                  <li>wow</li>\n                  <li>yes</li>\n                  <li>zero</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row my-4\">\n          <div className=\"col-11 col-lg-6 mx-auto\">\n            <Form\n              form={this.formName}\n              onSubmit={this.onSubmit}\n              fields={[\n                {\n                  name: 'audio',\n                  contentType: 'audio',\n                  label: 'Record audio',\n                },\n              ]}\n            />\n          </div>\n        </div>\n\n        {this.renderOutput()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = ({ modelForm }) => {\n  return { modelForm };\n};\n\nexport default connect(mapStateToProps, { submitForm })(SpeechToText);\n","import React from 'react';\n\nimport '../styles/Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer mt-5 py-3\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-6 text-left\">\n            <img\n              src={`${process.env.PUBLIC_URL}/orionai.png`}\n              style={{ height: '2rem' }}\n              alt=\"logo\"\n            />\n            <span className=\"text-muted ml-3\">Orion AI - EVA4</span>\n          </div>\n          <div className=\"col-6 text-right\">\n            <span className=\"text-muted mr-3\">\n              <a className=\"anchor-black\" href=\"https://github.com/OrionAI/\">\n                GitHub\n              </a>\n            </span>\n            <img\n              src={`${process.env.PUBLIC_URL}/github_logo.png`}\n              style={{ height: '1.5rem' }}\n              alt=\"github\"\n            />\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\nimport history from '../history';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport ResNet34 from './classification/ResNet34';\nimport MobileNetV2 from './classification/MobileNetV2';\nimport FaceAlignment from './faceRecognition/FaceAlignment';\nimport FaceSwap from './faceRecognition/FaceSwap';\nimport FaceRecognition from './faceRecognition/FaceRecognition';\nimport HumanPoseEstimation from './miscellaneous/HumanPoseEstimation';\nimport DcGan from './miscellaneous/DcGan';\nimport Vae from './miscellaneous/Vae';\nimport StyleTransfer from './miscellaneous/StyleTransfer';\nimport SrGan from './miscellaneous/SrGan';\nimport ImageCaptioning from './miscellaneous/ImageCaptioning';\nimport SentimentAnalysis from './sequence/SentimentAnalysis';\nimport MachineTranslation from './sequence/MachineTranslation';\nimport SpeechToText from './sequence/SpeechToText';\nimport Footer from './Footer';\n\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentItems = {\n      classification: {\n        title: 'Classification',\n        items: [\n          {\n            title: 'ResNet34',\n            link: 'resnet34',\n          },\n          {\n            title: 'MobileNet V2',\n            link: 'mobilenetv2',\n          },\n        ],\n      },\n      faceRecognition: {\n        title: 'Face Recognition',\n        items: [\n          {\n            title: 'Face Alignment',\n            link: 'facealignment',\n          },\n          {\n            title: 'Face Swap',\n            link: 'faceswap',\n          },\n          {\n            title: 'Face Recognition',\n            link: 'facerecognition',\n          },\n        ],\n      },\n      miscellaneous: {\n        title: 'Miscellaneous',\n        items: [\n          {\n            title: 'Pose Estimation Models',\n            link: 'humanposeestimation',\n            buttonText: 'HumanPoseEstimation',\n          },\n          {\n            title: 'Generative Models',\n            link: 'dcgan',\n            buttonText: 'DCGAN',\n          },\n          {\n            title: 'AutoEncoders',\n            link: 'vae',\n            buttonText: 'VAE',\n          },\n          {\n            title: 'Style Transfer',\n            link: 'styletransfer',\n            buttonText: 'Neural Style Transfer',\n          },\n          {\n            title: 'Super Resolution GAN',\n            link: 'srgan',\n            buttonText: 'SRGAN',\n          },\n          {\n            title: 'CNNs + LSTMs',\n            link: 'imagecaptioning',\n            buttonText: 'Image Captioning',\n          },\n        ],\n      },\n      nlp: {\n        title: 'NLP & Audio',\n        items: [\n          {\n            title: 'Sentiment Analysis',\n            link: 'sentimentanalysis',\n          },\n          {\n            title: 'Machine Translation',\n            link: 'machinetranslation',\n          },\n          {\n            title: 'Speech to Text',\n            link: 'speechtotext',\n          },\n        ],\n      },\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"page-container\">\n        <div className=\"content-wrap\">\n          <Router history={history}>\n            <Navbar componentItems={this.componentItems} />\n            <div className=\"container\">\n              <Switch>\n                <Route\n                  path=\"/\"\n                  exact\n                  component={() => (\n                    <Home componentItems={this.componentItems} />\n                  )}\n                />\n                <Route path=\"/resnet34\" exact component={ResNet34} />\n                <Route path=\"/mobilenetv2\" exact component={MobileNetV2} />\n                <Route path=\"/facealignment\" exact component={FaceAlignment} />\n                <Route path=\"/faceswap\" exact component={FaceSwap} />\n                <Route\n                  path=\"/facerecognition\"\n                  exact\n                  component={FaceRecognition}\n                />\n                <Route\n                  path=\"/humanposeestimation\"\n                  exact\n                  component={HumanPoseEstimation}\n                />\n                <Route path=\"/dcgan\" exact component={DcGan} />\n                <Route path=\"/vae\" exact component={Vae} />\n                <Route path=\"/styletransfer\" exact component={StyleTransfer} />\n                <Route path=\"/srgan\" exact component={SrGan} />\n                <Route\n                  path=\"/imagecaptioning\"\n                  exact\n                  component={ImageCaptioning}\n                />\n                <Route\n                  path=\"/sentimentanalysis\"\n                  exact\n                  component={SentimentAnalysis}\n                />\n                <Route\n                  path=\"/machinetranslation\"\n                  exact\n                  component={MachineTranslation}\n                />\n                <Route path=\"/speechtotext\" exact component={SpeechToText} />\n              </Switch>\n            </div>\n          </Router>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { SUBMIT_FORM } from '../actions/types';\n\nconst INITIAL_STATE = {\n  name: '',\n  data: null,\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SUBMIT_FORM:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport loadingFormReducer from './loadingFormReducer';\nimport modelFormReducer from './modelFormReducer';\n\nexport default combineReducers({\n  form: formReducer,\n  loadingForm: loadingFormReducer,\n  modelForm: modelFormReducer,\n});\n","import { LOADING_FORM, CLEAR_LOADING_FORM } from '../actions/types';\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case LOADING_FORM:\n      return [...state, action.payload];\n    case CLEAR_LOADING_FORM:\n      return state.filter(element => element !== action.payload);\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}